#! /usr/bin/env bash
##
#   Script:   cgrep -- recursively grep through code
#   Version:  3.0
##

# Uncomment for shell debugging.
#set -x

ME=$(basename $0)
LOCAL_PATHS=/usr/gnu/bin:/opt/local/bin:/usr/local/bin
STD_PATHS=/bin:/usr/bin

##### Functions ###############################################################

##
# Given a command and an option, test whether the command supports the option.
# If so, echo the command followed by the option; else just the command.
##
add_sup_opt() {
  if echo x | $1 $2 x >/dev/null 2>&1
  then printf "%s %s\n" "$1" "$2"
  else printf "%s\n" "$1"
  fi
}

##
# Given an executable name and a path, return the component of the path
# containing the executable, if any.
##
find_path() {
  local cmd=$1 cmd_path path_comp
  echo $2 | tr ':' '\012' | while read path_comp
  do
    cmd_path="$path_comp/$cmd"
    [ -x "$cmd_path" ] && { echo "$cmd_path"; break; }
  done
}

##
# Given a command, unalias it (if aliased).
##
unalias() {
  local rv=$(alias $1 2>/dev/null | cut -f2 -d"'")
  echo ${rv:-$1}
}

##
# Print the usage message and exit.
##
usage() {
  cat >&2 <<END
usage: $ME [-cCfghilmnpsy] pattern [glob]

-c: Grep through .c files only.
-C: Grep through .cpp files only.
-f: Print file name only.
-g: Grep through .go files only.
-h: Grep through .h files only.
-i: Perform case-insensitive matching.
-l: Grep through .l files only.
-m: Grep through .md files only.
-n: Print line numbers.
-p: Grep through .py files only.
-s: Follow symbolic links.
-y: Grep through .y files only.

Default greps through .c, .cpp, .h, .hpp, .l, .lpp, .y, and .ypp files.
END
  exit $1
}

##### Main ####################################################################

FOLLOW=false

while getopts cCfghilmnpsy opt
do
  case $opt in
  c) FILES1="*.c"   ;;
  C) FILES1="*.cpp" ;;
  f) NAME_ONLY=-l   ;;
  g) FILES1="*.go"  ;;
  h) FILES1="*.h"   ;;
  i) INSENSITIVE=-i ;;
  l) FILES1="*.l"   ;;
  m) FILES1="*.md"  ;;
  n) LINE_NUMBER=-n ;;
  p) FILES1="*.py"  ;;
  s) FOLLOW=true    ;;
  y) FILES1="*.y"   ;;
  ?) usage 1        ;;
  esac
done
shift $(( OPTIND - 1 ))
(( $# >= 1 && $# <= 2 )) || usage 1

PATTERN=$1
(( $# == 2 )) && {
  [[ $FILES1 ]] && {
    echo "$ME: options and glob are mutually exclusive" >&2
    exit 1
  }
  FILES1=$2
}

[[ -z $FILES1 && -z $FILES2 ]] && { FILES1="*.[chly]"; FILES2="*.[chly]pp"; }

###############################################################################

# If ripgrep is available, use that.
if command -v rg >/dev/null 2>/dev/null
then
  [[ $LINE_NUMBER ]] || LINE_NUMBER=-N
  GREP=$(unalias rg)
  GREP="exec $GREP ${FOLLOW:+-L} $INSENSITIVE $LINE_NUMBER $NAME_ONLY"

  PATTERN=$(echo "$PATTERN" | sed -E 's!\\(<|>)!\\b!g')

  if [[ $FILES2 ]]
  then $GREP --glob "$FILES1" --glob "$FILES2" "$PATTERN"
  else $GREP --glob "$FILES1" "$PATTERN"
  fi
fi

# Look for ggrep (GNU grep) first.
GREP=$(find_path ggrep $LOCAL_PATHS:$STD_PATHS)
# Failing that, look for a local grep(1) and assume it's preferred.
[[ $GREP ]] || GREP=$(find_path grep $LOCAL_PATHS)
# Otherwise, default to regular grep(1).
[[ $GREP ]] || GREP=$(unalias grep)

# See if grep accepts the -E (extended regexp) option.
GREP=$(add_sup_opt $GREP -E)

# See if grep accepts the -i (ignore case) option.
[[ $INSENSITIVE ]] && GREP=$(add_sup_opt $GREP $INSENSITIVE)

# See if grep accepts the -I (ignore binary files) option.
GREP=$(add_sup_opt $GREP -I)

# See if grep accepts the -n (line number) option.
[[ $LINE_NUMBER ]] && GREP=$(add_sup_opt $GREP $LINE_NUMBER)

# See if grep accepts the -N (name only) option.
[[ $NAME_ONLY ]] && GREP=$(add_sup_opt $NAME_ONLY)

# See if grep accepts the -S (follow symlinks) option.
$FOLLOW && GREP=$(add_sup_opt -S)

# See if grep accepts the --include and -r (recursive) options.
if echo x | $GREP --include x -r x >/dev/null 2>&1
then
  GREP="exec $GREP -r"
  if [[ $FILES2 ]]
  then $GREP --include "$FILES1" --include "$FILES2" "$PATTERN" .
  else $GREP --include "$FILES1" "$PATTERN" .
  fi
else
  if [[ $FILES2 ]]
  then find . -name "$FILES1" -o -name "$FILES2"
  else find . -name "$FILES1"
  fi | xargs grep "$PATTERN"
fi


###############################################################################
# vim:set et sw=2 ts=2:
