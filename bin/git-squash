#! /bin/bash
##
#   git-squash -- Squash all the commits on a branch into a single commit.
#   Version: 2.3
#
#   Paul J. Lucas
##

set -e # stop on error

# uncomment to debug
#set -x

###############################################################################

ME=`basename $0`

usage() {
  cat >&2 <<END
usage: $ME [-dmnpr] <branch-name> <main-branch-name>

-d: Perform a dry-run by only printing what would be done.
-m: Suppress merging from <main-branch-name> first.
-n: Same as -d.
-p: (Re)publish renamed squashed branch (implies -r).
-r: Rename new <branch-name>-squashed branch to <branch-name> (replacing it).
END
  exit $1
}

MERGE_FROM_MAIN=true
PUBLISH=false
RENAME=false

while getopts dmnpr opt
do
  case $opt in
  d|n)  ECHO=echo ;;
  m)    MERGE_FROM_MAIN=false ;;
  p)    PUBLISH=true; RENAME=true ;;
  r)    RENAME=true ;;
  ?)    usage 1 ;;
  esac
done
shift `expr $OPTIND - 1`
[ $# -eq 2 ] || usage 1

BRANCH="$1"
MAIN="$2"
SQUASHED="${BRANCH}-squashed"

########## Do it.

read -d '' -r -n1 < <(git status --porcelain) && {
  cat >&2 <<END

Uncommitted changes or unknown files detected -- squash aborted.
You need either to commit or revert changes and either to commit or remove
unknown files first.
Then you may re-attempt $ME.
END
  exit 6
}

$ECHO git checkout "$MAIN"

$MERGE_FROM_MAIN && {
  $ECHO git pull || {
    git checkout -f "$BRANCH"
    cat >&2 <<END

The "git pull" of "$MAIN" failed.
Your original branch "$BRANCH" is unmodified.
You need to resolve the issues manually.
Then you may re-attempt $ME.
END
    exit 2
  }

  $ECHO git checkout "$BRANCH"
  $ECHO git merge "$MAIN" || {
    git merge --abort
    cat >&2 <<END

The "git merge $MAIN" failed (likely due to a merge conflict).
Your original branch '$BRANCH' is unmodified.
You need to do the merge, fix the conflicts, commit, and push (for safety),
all manually.
Then you may re-attempt $ME.
END
    exit 3
  }
  $ECHO git commit -m"Merge from $MAIN." || true
}

$ECHO git branch "$SQUASHED"
$ECHO git checkout "$SQUASHED"

$ECHO git fetch || {
  git checkout -f "$BRANCH"
  git branch -D "$SQUASHED"
  cat >&2 <<END

The "git fetch" failed (likely due to the remote repository being unavailable).
Your original branch '$BRANCH' is unmodified.
You may re-attempt $ME at a later time.
END
  exit 4
}

$ECHO git reset --hard "$MAIN"

$ECHO git merge --squash "$BRANCH" || {
  git checkout -f "$BRANCH"
  git branch -D "$SQUASHED"
  cat >&2 <<END

The "git merge" failed (likely due to a merge conflict).
Your original branch '$BRANCH' is unmodified.
You need to do the merge, fix the conflicts, commit, and push (for safety),
all manually.
Then you may re-attempt $ME.
END
  exit 5
}

$ECHO git commit

if $RENAME
then
  # Failure to delete the possibly nonexistent remote branch is not fatal.
  $ECHO git push origin --delete "$BRANCH" 2>/dev/null || true

  $ECHO git branch -D "$BRANCH"
  $ECHO git branch -m "$BRANCH"
  if $PUBLISH
  then
    $ECHO git push -u origin "$BRANCH"
    if [ -z "$ECHO" ]
    then
      echo
      echo "Per request (-p), your remote brach '$BRANCH', if any, was deleted,"
      echo "your original branch '$BRANCH' was replaced by the squashed branch,"
      echo "and the newly squashed branch '$BRANCH' was (re)published."
    fi
  elif [ -z "$ECHO" ]
  then
    echo
    echo "Per request (-r), your remote brach '$BRANCH', if any, was deleted,"
    echo "your original branch '$BRANCH' was replaced by the squashed branch,"
    echo "but the newly squashed branch '$BRANCH' was NOT (re)published (no -p)."
    echo "To (re)publish manually, do:"
    echo
    echo "    git push -u origin $BRANCH"
  fi
elif [ -z "$ECHO" ]
then
  echo
  echo "You now have a squashed branch named $SQUASHED."
  echo "Your original branch '$BRANCH' is unmodified per request (no -r)."
  echo
  echo "You likely want to replace the unmodified '$BRANCH' branch"
  echo "by the '$SQUASHED' branch.  To do that manually, do:"
  echo
  echo "    git push origin --delete $BRANCH # only if you pushed the branch"
  echo "    git branch -D $BRANCH"
  echo "    git branch -m $BRANCH"
  echo
  echo "To (re)publish, do:"
  echo
  echo "    git push -u origin $BRANCH"
fi

###############################################################################
# vim:set et sw=2 ts=2:
